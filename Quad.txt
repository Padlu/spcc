import java.util.*;
import java.util.Stack;
 
public class TestQuad 
{ 
	static void evaluatePostfix(String exp)
	{
		Stack<String> stack = new Stack<>();
		int i,k = 0;
		String c,ch;
		char comp;	
		
		for(i=0;i<exp.length();i++)
		{
			comp = exp.charAt(i);
			c = Character.toString(comp);
			
			if(comp == '+' || comp == '-' || comp == '*' || comp == '/')
				{
					k++;
					String val1 = stack.pop();
					String val2 = stack.pop();
					ch = ("T" + k);
					stack.push(ch);
					System.out.println(c+"\t"+val2+"\t"+val1+"\tT"+k);
				}
			else
				stack.push(c);
		}    
	}
	 
	// Driver program to test above functions
	public static void main(String[] args) 
	{
		String exp="AB+C*DE-FG+*-"; // (((A+B)*C)-((D-E)*(F+G)))
		System.out.println("The Postfix expression provided is : " + exp + "\n\nThe Quadruple Table for above postfix expression :");
		System.out.println("\nOP\tVAR1\tVAR2\tRES");
		evaluatePostfix(exp);
	}
}
/*
static int Prec(char ch)
    {
        switch (ch)
        {
        case '+':
        case '-':
            return 1;
      
        case '*':
        case '/':
            return 2;
      
        case '^':
            return 3;
        }
        return -1;
    }
static String infixToPostfix(String exp) {
        String result = new String("");
        Stack < Character > stack = new Stack < > ();
        for (int i = 0; i < exp.length(); ++i) {
            char c = exp.charAt(i);
            if (Character.isLetterOrDigit(c))
                result += c;
            else if (c == '(')
                stack.push(c);
            else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(')
                    result += stack.pop();
                if (!stack.isEmpty() && stack.peek() != '(')
                    return "Invalid Expression"; // invalid expression
                else
                    stack.pop();
            } else // an operator is encountered
            {
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek()))
                    result += stack.pop();
                stack.push(c);
            }
        }
        // pop all the operators from the stack
        while (!stack.isEmpty())
            result += stack.pop();
    }
*/
