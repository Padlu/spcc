digits [0-9]
ltr [a-zA-Z]
alphanum [a-zA-Z0-9]

%%

("abstract"|"assert"|"boolean"|"break"|"byte"|"case"|"case"|"catch"|"char"|"class"|"const"|"default"|"do"|"double"|"else"|"enum"|"extends"|"false"|"final"|"finally"|"float"|"for"|"goto"|"if"|"implements"|"import"|"instanceof"|"int"|"interface"|"long"|"native"|"new"|"null"|"package"|"private"|"protected"|"public"|"return"|"short"|"static"|"strictfp"|"super"|"switch"|"synchronized"|"this"|"throw"|"throws"|"transient"|"true"|"try"|"void"|"volatile"|"while"|"continue") printf("found reserved word: ’%s’\n", yytext);

("//")({alphanum}|" ")*|(("/*")({alphanum}|" ")*("*/")) printf("found Comment : '%s'\n", yytext);

{digits}+ printf("found number: ’%s’\n", yytext);

{ltr}(_|{alphanum})* printf("found identifer: ’%s’\n", yytext);

("{"|"}"|"("|")"|";"|",") printf("found Separator : '%s'\n", yytext);

("++"|"--")({ltr}+)|({ltr}+)("++"|"--") printf("found Unary Operator : '%s'\n", yytext);

("*"|"/"|"%"|"+"|"-") printf("found Arithmetic Operator : '%s'\n", yytext);

("<<"|">>"|">>>") printf("found Shift Operator : '%s'\n", yytext);

("<"|">"|"<="|">=") printf("found Comparison Operator : '%s'\n", yytext);

("=="|"!=") printf("found Equality Operator : '%s'\n", yytext);

("&"|"|"|"^") printf("found Bitwise Operator : '%s'\n", yytext);

("&&"|"||") printf("found Logical Operator : '%s'\n", yytext);

("? :") printf("found Ternary Operator : '%s'\n", yytext);

("="|"+="|"-="|"/="|"%="|"*="|"&="|"^="|"|="|"<<="|">>="|">>>=") printf("found Assignment Operator : '%s'\n", yytext);

’.’ printf("found character: {%s}\n", yytext);

%%

int main(int argc, char **argv)
{
    printf("INPUT : ");
    yylex();
}

OUTPUT :
Abhisheks-MacBook-Pro:Desktop abhishekpadalkar$ flex flex.l
Abhisheks-MacBook-Pro:Desktop abhishekpadalkar$ gcc lex.yy.c -ll
Abhisheks-MacBook-Pro:Desktop abhishekpadalkar$ ./a.out
